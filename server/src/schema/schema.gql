
type ContactPerson {
	id: ID!
	fullName: String
	mobile: String
}

interface Customer {
	id: ID!
	name: String!
	loansCount: Int!
	loansAmount: Int!
	loans: [Loan]
}

type PhysicalCustomer implements Customer {
	id: ID!
	name: String!
	loansCount: Int!
	loansAmount: Int!
	loans: [Loan]
	firstName: String
	lastName: String
	age: Int
}

type JuridicalCustomer implements Customer {
	id: ID!
	name: String!
	loansCount: Int!
	loansAmount: Int!
	loans: [Loan]
	registrationNumber: String
	contactPersons: [ContactPerson]
}


type Loan {
	id: ID!
	name: String
	amount: Float
}


# This type specifies the entry points into our API
type Query {
	customers(skip: Int, take: Int): [Customer]    # "[]" means this is a list of channels
	customersCount: Int
	customer(id: ID!): Customer
}

# The mutation root type, used to define all mutations
type Mutation {
	customerCreatePhysical(name: String!): PhysicalCustomer
	customerCreateJuridical(name: String!): JuridicalCustomer
	loanCreate(customerId: ID!, amount: Float, name: String): Loan
}

# The subscription root type, specifying what we can subscribe to
type Subscription {
	customerCreated: Customer
	loanCreated: Loan
}
